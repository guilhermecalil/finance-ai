"use server";

import { db } from "@/app/_lib/prisma";
import OpenAI from "openai";
import { GenerateAiReportSchema, generateAiReportSchema } from "./schema";

// üîÅ Aqui voc√™ deve substituir por sua l√≥gica de autentica√ß√£o real
import { authOptions } from "@/app/api/auth/[...nextauth]/authOptions"; // ajuste para onde est√° seu config
import { getServerSession } from "next-auth";
// OU implemente algo como: import { auth } from "@/lib/auth"; se for algo customizado

const DUMMY_REPORT = `### Relat√≥rio de Finan√ßas Pessoais

#### Resumo Geral das Finan√ßas
As transa√ß√µes listadas foram analisadas e as seguintes informa√ß√µes foram extra√≠das para oferecer insights sobre suas finan√ßas:

- **Total de despesas:** R$ 19.497,56
- **Total de investimentos:** R$ 14.141,47
- **Total de dep√≥sitos/correntes:** R$ 10.100,00 (considerando dep√≥sitos de sal√°rio e outros)
- **Categoria de maior despesa:** Alimenta√ß√£o

#### An√°lise por Categoria
1. **Alimenta√ß√£o:** R$ 853,76
2. **Transporte:** R$ 144,05
3. **Entretenimento:** R$ 143,94
4. **Outras despesas:** R$ 17.828,28 (inclui categorias como sa√∫de, educa√ß√£o, habita√ß√£o)

#### Tend√™ncias e Insights
- **Despesas Elevadas em Alimenta√ß√£o:** A categoria de alimenta√ß√£o representa uma parte significativa de suas despesas, com um total de R$ 853,76 nos √∫ltimos meses.
- **Despesas Vari√°veis:** Entretenimento e transporte acumulam ao longo do m√™s.
- **Investimentos:** R$ 14.141,47 √© um bom indicador para constru√ß√£o de patrim√¥nio.
- **Categoriza√ß√£o das Despesas:** Despesas listadas como "OUTRA" devem ser reavaliadas.

#### Dicas para Melhorar Sua Vida Financeira
1. Crie um or√ßamento mensal.
2. Reduza gastos com alimenta√ß√£o.
3. Revise despesas recorrentes.
4. Estabele√ßa metas de poupan√ßa.
5. Diminua os gastos com entretenimento.
6. Reavalie seus investimentos.
7. Acompanhe suas finan√ßas regularmente.

#### Conclus√£o
Melhorar sua vida financeira √© um processo cont√≠nuo. Cada real economizado √© um passo rumo √† seguran√ßa financeira!
`;

export const generateAiReport = async ({ month }: GenerateAiReportSchema) => {
  generateAiReportSchema.parse({ month });

  const session = await getServerSession(authOptions);

  if (!session || !session.user) {
    throw new Error("Usu√°rio n√£o autenticado!");
  }

  const subscriptionPlan = session.user.subscriptionPlan;

  // Voc√™ pode ajustar isso para vir do banco de dados ou session.user diretamente
  if (
    typeof subscriptionPlan !== "string" ||
    !["elite", "premium", "essencial"].includes(subscriptionPlan)
  ) {
    throw new Error(
      "Voc√™ precisa de um plano pago (Essencial, Premium ou Elite) para gerar relat√≥rios IA.",
    );
  }

  // Fallback se n√£o tiver OpenAI KEY
  if (!process.env.OPENAI_API_KEY) {
    await new Promise((resolve) => setTimeout(resolve, 2000));
    return DUMMY_REPORT;
  }

  const openAi = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });

  const transactions = await db.transaction.findMany({
    where: {
      date: {
        gte: new Date(new Date().getFullYear(), parseInt(month) - 1, 1),
        lt: new Date(new Date().getFullYear(), parseInt(month), 1),
      },
    },
  });

  const basePrompt = `Gere um relat√≥rio com insights sobre as minhas finan√ßas. As transa√ß√µes est√£o divididas por ponto e v√≠rgula. A estrutura de cada uma √© {DATA}-{TIPO}-{VALOR}-{CATEGORIA}. S√£o elas:
${transactions
  .map(
    (transaction) =>
      `${transaction.date.toLocaleDateString("pt-BR")}-R$${transaction.amount}-${transaction.type}-${transaction.category}`,
  )
  .join(";")}`;

  let promptDetails = "";

  switch (subscriptionPlan) {
    case "elite":
      promptDetails =
        "Inclua um resumo detalhado, insights personalizados e sugest√µes estrat√©gicas.";
      break;
    case "premium":
      promptDetails = "Forne√ßa insights financeiros e sugest√µes de economia.";
      break;
    case "essencial":
      promptDetails =
        "Forne√ßa um resumo financeiro simples sem insights detalhados.";
      break;
  }

  const completion = await openAi.chat.completions.create({
    model: "gpt-4o",
    messages: [
      {
        role: "system",
        content:
          "Voc√™ √© um especialista em finan√ßas pessoais, ajudando a organizar e melhorar a vida financeira das pessoas.",
      },
      {
        role: "user",
        content: `${basePrompt}\n\n${promptDetails}`,
      },
    ],
  });

  return completion.choices[0].message.content;
};
